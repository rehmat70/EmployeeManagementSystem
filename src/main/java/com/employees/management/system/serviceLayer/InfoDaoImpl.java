package com.employees.management.system.serviceLayer;

import com.employees.management.system.entities.EmployeesInfo;
import com.employees.management.system.exception.EmployeeNotFoundException;
import com.employees.management.system.exception.ResponseNotFoundException;
import com.employees.management.system.repositories.EmployeeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class InfoDaoImpl implements InfoDao {
    private final EmployeeRepository employeeRepository;

   // ************************************************************************************
                //Here is no checks needed for empId and directly save the EmployeesInfo entity.
                // because (empId) Auto generated By database
    @Override
    public EmployeesInfo saveEntity(EmployeesInfo employeesInfo) {
        return employeeRepository.save(employeesInfo);
    }
    //***********************************************************************************
    @Override
    public List<EmployeesInfo> saveAllEntity(List<EmployeesInfo> employeesInfo) {
        return employeeRepository.saveAll(employeesInfo);
    }
    //************************************************************************************
    @Override
    public EmployeesInfo findById(Long empId) {
        return employeeRepository.findById(empId)
                .orElseThrow(() -> new EmployeeNotFoundException("Employee not found with empId : "+ empId+" : "));
    }
    //************************************************************************************
    @Override
    public List<EmployeesInfo> findAllEmployeesInfo() {
        return employeeRepository.findAll();
    }
    //************************************************************************************
    @Override
    public List<EmployeesInfo> findByAgeAfter(int age) {
        List<EmployeesInfo> employees = employeeRepository.findByAgeGreaterThan(age);
        if (employees.isEmpty()) {
            throw new EmployeeNotFoundException("No employees found older than age : "+ age +" : ");
        }
        return employees;
    }

    //***********************************************************************************
    @Override
    public List<EmployeesInfo> findByAgeBetween(int miniAge, int maxAge) {
        List<EmployeesInfo> employees = employeeRepository.findByAgeBetween(miniAge, maxAge);
        if (employees.isEmpty()) {
            throw new ResponseNotFoundException("No employees found between ages " + miniAge + " and " + maxAge, "EmployeesInfo", "age", miniAge + "-" + maxAge);
        }
        return employees;
    }
    //************************************************************************************
    @Override
    public EmployeesInfo updateSingleEntity(EmployeesInfo employeesInfo, Long empId) {
        EmployeesInfo employeesInfo1=employeeRepository.findById(empId)
                .orElseThrow(() -> new EmployeeNotFoundException("Employee not found with empId: " + empId));
        employeesInfo1.setFirstName(employeesInfo.getFirstName());
        employeesInfo1.setLastName(employeesInfo.getLastName());
        employeesInfo1.setAge(employeesInfo.getAge());
        employeesInfo1.setGender(employeesInfo.getGender());
        employeesInfo1.setEmailAddress(employeesInfo.getEmailAddress());
        employeesInfo1.setContactNumber(employeesInfo.getContactNumber());



        return employeeRepository.save(employeesInfo1);
    }
    //*********************************************************************************
    //    @Override
//    public ResponseEntity<EmployeesInfo> deleteById(Long empId) {
//        EmployeesInfo employeesInfo=employeeRepository.findById(empId)
//                .orElseThrow(() -> new ResponseNotFoundException("Employee not found with empId", "EmployeesInfo", "empId", empId));
//        employeeRepository.deleteById(empId);
//
//        return new ResponseEntity<>(HttpStatus.OK);
//    }

    @Override
    public void deleteById(Long empId) {
        if (!employeeRepository.existsById(empId)) {
            throw new EmployeeNotFoundException("Employee not found with empId: " + empId);
        }
        employeeRepository.deleteById(empId);
    }

    //********************************************************************************

}
